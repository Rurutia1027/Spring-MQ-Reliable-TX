syntax = "proto3";

package payment.message;

option java_multiple_files = true;
option java_package = "com.cloud.payment.service.message.grpc";
option java_outer_classname = "TransactionMessageProto";

// Define the transaction message structure
message RpTransactionMessage {
  string message_id = 1;
  string message_body = 2;
  string message_data_type = 3;
  string consumer_queue = 4;
  int32 message_send_times = 5;
  string already_dead = 6;
  string field1 = 7;
  string field2 = 8;
  string field3 = 9;
}

// Request and response messages
message SaveMessageRequest {
  RpTransactionMessage message = 1;
}

message SaveMessageResponse {
  int32 status = 1;
}

message MessageIdRequest {
  string message_id = 1;
}

message MessageResponse {
  RpTransactionMessage message = 1;
}

message VoidResponse {}

message QueueNameRequest {
  string queue_name = 1;
  int32 batch_size = 2;
}

// gRPC service definition
service RpcRpTransactionMessageService {
  rpc SaveMessageWaitingConfirm(SaveMessageRequest) returns (SaveMessageResponse);
  rpc ConfirmAndSendMessage(MessageIdRequest) returns (VoidResponse);
  rpc SaveAndSendMessage(SaveMessageRequest) returns (SaveMessageResponse);
  rpc DirectSendMessage(SaveMessageRequest) returns (VoidResponse);
  rpc ReSendMessage(SaveMessageRequest) returns (VoidResponse);
  rpc ReSendMessageByMessageId(MessageIdRequest) returns (VoidResponse);
  rpc SetMessageToAlreadyDead(MessageIdRequest) returns (VoidResponse);
  rpc GetMessageByMessageId(MessageIdRequest) returns (MessageResponse);
  rpc DeleteMessageByMessageId(MessageIdRequest) returns (VoidResponse);
  rpc ReSendAllDeadMessageByQueueName(QueueNameRequest) returns (VoidResponse);
}